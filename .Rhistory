#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(conservation = c("A","B","C")))
vids.mulp
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c("A","B","C")))
vids.mulp
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y")
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
# chunk setup
knitr::opts_chunk$set(echo = TRUE)
# import libs
library(lubridate)
library(scales)
library(tidyverse)
plot(iris$Sepal.Length)
plot(iris$Species)
hist(iris$Sepal.Length)
library(ggplot2)
ggplot(data = iris, mapping = aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point(aes(colour = Species, size = Petal.Length), alpha = 0.65)
data_budget <- read_csv("data_input/data-bugdet.csv")
data_budget
data_agg <- data_budget %>%
filter(
year(periode) == 2018,
jenis == "Realisasi"
) %>%
group_by(daerah) %>%
arrange(daerah, desc(periode)) %>%
slice(1) %>%
select(daerah, pendapatan_asli_daerah) %>%
arrange(desc(pendapatan_asli_daerah)) %>%
head(5)
data_agg
ggplot(data = data_agg, mapping = aes(x = daerah, y = pendapatan_asli_daerah)) +
geom_col()
data_agg <- data_budget %>%
filter(
year(periode) == 2018,
jenis == "Realisasi"
) %>%
group_by(daerah) %>%
arrange(daerah, desc(periode)) %>%
slice(1) %>%
select(daerah, pendapatan_daerah) %>%
arrange(desc(pendapatan_daerah)) %>%
head(5)
data_agg
ggplot(data_agg, aes(x = daerah, y = pendapatan_daerah)) +
geom_col()
ggplot(data_agg, aes(x = reorder(daerah, pendapatan_daerah), y = pendapatan_daerah)) +
geom_col(aes(fill = pendapatan_daerah))
ggplot(data_agg, aes(x = reorder(daerah, pendapatan_daerah), y = pendapatan_daerah)) +
geom_col(aes(fill = pendapatan_daerah)) +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Pendapatan Daerah Terbesar di 2018",
x = NULL,
y = NULL,
fill = NULL
)
ggplot(data_agg, aes(x = reorder(daerah, pendapatan_daerah), y = pendapatan_daerah)) +
geom_col(aes(fill = pendapatan_daerah)) +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Pendapatan Daerah Terbesar di 2018",
x = NULL,
y = NULL,
fill = NULL
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_fill_continuous(low = "orange", high = "red")
ggplot(data_agg, aes(x = reorder(daerah, pendapatan_daerah), y = pendapatan_daerah)) +
geom_col(aes(fill = pendapatan_daerah)) +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Pendapatan Daerah Terbesar di 2018",
x = NULL,
y = NULL,
fill = NULL
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(labels = label_dollar(scale = 1e-9, prefix = "Rp ", suffix = " M"), breaks = breaks_width(10e12)) +
scale_fill_continuous(low = "orange", high = "red")
class(label_rupiah)
label_rupiah(c(100e12, 200e12))
label_rupiah <- label_dollar(scale = 1e-9, prefix = "Rp ", suffix = " M")
ggplot(data_agg, aes(x = reorder(daerah, pendapatan_daerah), y = pendapatan_daerah)) +
geom_col(aes(fill = pendapatan_daerah)) +
geom_text(aes(label = label_rupiah(pendapatan_daerah), y = pendapatan_daerah + max(pendapatan_daerah) * 0.05)) +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Pendapatan Daerah Terbesar di 2018",
x = NULL,
y = NULL,
fill = NULL
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(labels = label_rupiah) +
scale_fill_continuous(low = "orange", high = "red")
# Step 2: siapkan data agregat
data_agg <- data_budget %>%
filter(
year(periode) == 2018,
jenis == "Realisasi"
) %>%
group_by(daerah) %>%
arrange(daerah, desc(periode)) %>%
slice(1) %>%
select(daerah, pendapatan_daerah) %>%
arrange(desc(pendapatan_daerah)) %>%
head(5)
# Step 3 + lanjutan: visualisasikan + dipercantik
label_rupiah <- label_dollar(scale = 1e-9, prefix = "Rp ", suffix = " M", big.mark = ".", decimal.mark = ",")
ggplot(data_agg, aes(x = reorder(daerah, pendapatan_daerah), y = pendapatan_daerah)) +
geom_col(aes(fill = pendapatan_daerah)) +
geom_text(aes(label = label_rupiah(pendapatan_daerah), y = pendapatan_daerah + max(pendapatan_daerah) * 0.05)) +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Pendapatan Daerah Terbesar di 2018",
x = NULL,
y = NULL,
fill = NULL
) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(labels = label_rupiah) +
scale_fill_continuous(low = "orange", high = "red")
# Step 1: agregasi data
data_agg <- data_budget %>%
filter(year(periode) == 2017) %>%
arrange(daerah, jenis, desc(periode)) %>%
group_by(daerah, jenis) %>%
slice(1) %>%
select(daerah, jenis, pendapatan_asli_daerah) %>%
spread(key = jenis, value = pendapatan_asli_daerah) %>%
mutate(selisih_anggaran = Anggaran - Realisasi) %>%
arrange(desc(selisih_anggaran)) %>%
head(5)
# Step 2: visualisasi
label_rupiah <- label_dollar(scale = 1e-9, prefix = "Rp ", suffix = " M", big.mark = ".", decimal.mark = ",")
ggplot(data_agg, aes(x = reorder(daerah, selisih_anggaran), y = selisih_anggaran)) +
geom_col(aes(fill = selisih_anggaran)) +
geom_text(aes(label = label_rupiah(selisih_anggaran), y = selisih_anggaran + max(selisih_anggaran) * 0.05)) +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Selisih Anggaran dengan Realisasi Terbesar di 2017",
subtitle = "Dihitung dari Anggaran dikurangi Realisasi",
x = NULL,
y = NULL,
fill = NULL
) +
theme_minimal() +
scale_y_continuous(labels = label_rupiah) +
scale_fill_continuous(low = "orange", high = "red")
# Step 1: agregasi data
data_agg <- data_budget %>%
filter(year(periode) == 2017) %>%
arrange(daerah, jenis, desc(periode)) %>%
group_by(daerah, jenis) %>%
slice(1) %>%
select(daerah, jenis, pendapatan_asli_daerah) %>%
spread(key = jenis, value = pendapatan_asli_daerah) %>%
mutate(selisih_anggaran = Anggaran - Realisasi) %>%
arrange(desc(selisih_anggaran)) %>%
head(10)
# Step 2: visualisasi
label_rupiah <- label_dollar(scale = 1e-9, prefix = "Rp ", suffix = " M", big.mark = ".", decimal.mark = ",")
ggplot(data_agg, aes(x = reorder(daerah, selisih_anggaran), y = selisih_anggaran)) +
geom_col(aes(fill = selisih_anggaran)) +
geom_text(aes(label = label_rupiah(selisih_anggaran), y = selisih_anggaran + max(selisih_anggaran) * 0.15)) +
coord_flip() +
guides(fill = FALSE) +
labs(
title = "5 Daerah dengan Selisih Anggaran dengan Realisasi Terbesar di 2017",
subtitle = "Dihitung dari Anggaran dikurangi Realisasi",
x = NULL,
y = NULL,
fill = NULL
) +
theme_minimal() +
scale_y_continuous(labels = label_rupiah) +
scale_fill_continuous(low = "orange", high = "red")
data_join <- data_budget %>%
filter(year(periode) == 2017) %>%
arrange(daerah, jenis, desc(periode)) %>%
group_by(daerah, jenis) %>%
slice(1) %>%
select(daerah, jenis, pendapatan_asli_daerah) %>%
spread(key = jenis, value = pendapatan_asli_daerah) %>%
mutate(selisih_anggaran = Anggaran - Realisasi) %>%
arrange(desc(selisih_anggaran)) %>%
head(10)
data_join
# Step 1: agregasi data
data_agg <- data_budget %>%
filter(year(periode) == 2017) %>%
arrange(daerah, jenis, desc(periode)) %>%
group_by(daerah, jenis) %>%
slice(1) %>%
select(daerah, jenis, pendapatan_asli_daerah)
data_agg <- data_join %>%
select(daerah) %>%
left_join(data_agg)
# Step 2: visualisasi
ggplot(data_agg, aes(x = daerah, y = pendapatan_asli_daerah)) +
geom_col(aes(fill = jenis)) +
coord_flip() +
theme_minimal()
# Step 2: visualisasi
ggplot(data_agg, aes(x = daerah, y = pendapatan_asli_daerah)) +
geom_col(aes(fill = jenis), position = "dodge") +
coord_flip() +
theme_minimal()
data_agg <- data_budget %>%
filter(
year(periode) == 2018,
jenis == "Realisasi",
pendapatan_asli_daerah < quantile(pendapatan_asli_daerah, probs = 0.99, na.rm = TRUE)
) %>%
mutate(tipe_daerah = ifelse(str_detect(daerah, "Kab"), "Kabupaten", "Kota"))
data_agg
ggplot(data_agg, aes(x = tipe_daerah, y = pendapatan_asli_daerah)) +
geom_boxplot(aes(fill = tipe_daerah)) +
theme_minimal()
ggplot(data_agg, aes(x = tipe_daerah, y = dana_perimbangan)) +
geom_boxplot(aes(fill = tipe_daerah)) +
theme_minimal()
ggplot(data_agg, aes(x = pendapatan_asli_daerah)) +
geom_density(aes(fill = tipe_daerah), colour = FALSE, alpha = 0.35) +
theme_minimal()
data_agg <- data_budget %>%
filter(year(periode) == 2018) %>%
arrange(daerah, jenis, desc(periode)) %>%
group_by(daerah, jenis) %>%
slice(1) %>%
ungroup() %>%
select(daerah, jenis, pendapatan_asli_daerah) %>%
filter(pendapatan_asli_daerah < quantile(pendapatan_asli_daerah, probs = 0.99)) %>%
spread(key = jenis, value = pendapatan_asli_daerah) %>%
drop_na()
ggplot(data_agg, aes(x = Anggaran, y = Realisasi)) +
geom_point(alpha = 0.35) +
geom_smooth() +
theme_minimal()
data_agg <- data_budget %>%
filter(
str_detect(daerah, "Jakarta"),
jenis == "Anggaran"
)
ggplot(data_agg, aes(x = year(periode), y = pendapatan_asli_daerah)) +
geom_line() +
theme_minimal()
data_agg <- data_budget %>%
filter(str_detect(daerah, "Jakarta"), year(periode) <= 2018)
ggplot(data_agg, aes(x = year(periode), y = pendapatan_asli_daerah)) +
geom_line(aes(colour = jenis)) +
theme_minimal()
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = max(value)))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
geom_col(data = max(vids.mulp$value), fill = "red")+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
vids.mulp$color <-  max(vids.mulp$value)
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
geom_col(aes(fill = color))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
vids.mulp
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
geom_point(aes(fill = color))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
ggplot(data = vids.mulp,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
geom_point(aes(col = color))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
vids.mul <- vids.mulp %>%
group_by(name) %>%
mutate(color = max(value))
vids.mul
ggplot(data = vids.mul,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = category_id))+
geom_point(aes(col = color))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
ggplot(data = vids.mul,mapping = aes(x = category_id,y = value)) +
geom_col(width = 0.8, mapping = aes(fill = color))+
geom_point(aes(col = color))+
#geom_col(data = vids.mulp[max(vids.mulp$value),], fill = value)+
facet_wrap(~name, scales = "free_y", labeller = labeller(name = c(likesp = "a",
dislikesp = "b",
commentp = "c")))
options(error = recover)
options(error = recover)
options(error = recover)
knitr::opts_chunk$Set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
heart<-read.csv("data_input/heart.csv")
heart<-read.csv("heart.csv")
heart<-read.csv("data_input/heart.csv")
set.seed(303)
intrain<-sample(nrow(heart),nrow(heart)*0.7)
heart_train<-heart[intrain]
log_conf<-confusionMatrix(pred_heart, target, positive="Not Health")
library(caret)
library(caret)
log_conf<-confusionMatrix(pred_heart, target, positive="Not Health")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(gtools)
library(gmodels)
library(ggplot2)
library(class)
library(tidyr)
heart<-read.csv("data_input/heart.csv")
str(heart)
heart <- heart %>%
mutate_if(is.integer, as.factor) %>%
mutate(sex = factor(sex, levels = c(0,1), labels = c("Female","Male")),
fbs =factor(fbs, levels = c(0,1), labels = c("False","True")),
exang = factor(exang, levels = c(0,1), labels = c("No","Yes")),
target = factor(target, levels = c(0,1),
labels = c("Health","Not Health")))
glimpse(heart)
colSums(is.na(heart))
prop.table(table(heart$target))
table(heart$target)
set.seed(303)
intrain<-sample(nrow(heart),nrow(heart)*0.7)
heart_train<-heart[intrain,]
heart_test<-heart[-intrain,]
heart$target %>%
levels()
model<-glm(formula = target~sex+cp+fbs+exang+oldpeak+slope+ca+thal, family = "binomial", data = heart_train)
summary(model)
library(MASS)
model2<-stepAIC(model,direction = "backward")
summary(model2)
heart_test$prob_heart<-predict(model2, type = "response", newdata = heart_test[,-14])
ggplot(heart_test, aes(x=prob_heart))+geom_density(lwd=0.5)+theme_minimal()
heart_test$pred_heart<-factor(ifelse(heart_test$prob_heart>0.5, "Not Health","Health"))
heart_test[1:10,c("pred_heart","target")]
library(caret)
log_conf<-confusionMatrix(heart_test$pred_heart, heart_test$target, positive="Not Health")
log_conf
Recall = (49)/(7+49)
Specificity = (27)/(27+8)
Accuracy = (27+49)/(27+7+8+49)
paste("Recall", Recall)
paste("Specificity", Specificity)
paste("Accuracy", Accuracy)
# tuning cutoff
performa <- function(cutoff, prob, ref, postarget, negtarget)
{
predict <- factor(ifelse(prob >= cutoff, postarget, negtarget))
conf <- caret::confusionMatrix(predict , ref, positive = postarget)
acc <- conf$overall[1]
rec <- conf$byClass[1]
prec <- conf$byClass[3]
spec <- conf$byClass[2]
mat <- t(as.matrix(c(rec , acc , prec, spec)))
colnames(mat) <- c("recall", "accuracy", "precicion", "specificity")
return(mat)
}
co <- seq(0.01,0.80,length=100)
result <- matrix(0,100,4)
for(i in 1:100){
result[i,] = performa(cutoff = co[i],
prob = heart_test$prob_heart,
ref = heart_test$target,
postarget = "Not Health",
negtarget = "Health")
}
data_frame("Recall" = result[,1],
"Accuracy" = result[,2],
"Precision" = result[,3],
"Specificity" = result[,4],
"Cutoff" = co) %>%
gather(key = "performa", value = "value", 1:4) %>%
ggplot(aes(x = Cutoff, y = value, col = performa)) +
geom_line(lwd = 1.5) +
scale_color_manual(values = c("darkred","darkgreen","orange", "blue")) +
scale_y_continuous(breaks = seq(0,1,0.1), limits = c(0,1)) +
scale_x_continuous(breaks = seq(0,1,0.1)) +
labs(title = "Tradeoff model perfomance") +
theme_minimal() +
theme(legend.position = "top",
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank())
#Odds ratio all coefficients
exp(model2$coefficients) %>%
data.frame()
dmy <- dummyVars(" ~target+sex+cp+fbs+exang+oldpeak+slope+ca+thal", data = heart)
dmy <- data.frame(predict(dmy, newdata = heart))
str(dmy)
dmy$target.Health <- NULL
dmy$sex.Female <- NULL
dmy$fbs.False <- NULL
dmy$exang.No <- NULL
names(dmy)
set.seed(300)
dmy_train <- dmy[intrain,2:21]
dmy_test <- dmy[-intrain,2:21]
dmy_train_label <- dmy[intrain,1]
dmy_test_label <- dmy[-intrain,1]
pred_knn <- class::knn(train = dmy_train,
test = dmy_test,
cl = dmy_train_label,
k = 17)
pred_knn_conf <- confusionMatrix(as.factor(pred_knn), as.factor(dmy_test_label),"1")
pred_knn_conf
eval_logit <- data_frame(Accuracy = log_conf$overall[1],
Recall = log_conf$byClass[1],
Precision = log_conf$byClass[3])
eval_knn <- data_frame(Accuracy = pred_knn_conf$overall[1],
Recall = pred_knn_conf$byClass[1],
Precision = pred_knn_conf$byClass[3])
options(error = recover)
library(reprex)
reprex()
(y <- 1:4)
reprex()
setwd("D:/machinelearning-FAQ")
render_book("book")
library(bookdown)
render_book("book")
render_book("book")
# clear-up the environment
rm(list = ls())
# chunk options
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
fig.align = "center",
comment = "#>"
)
# scientific notation
options(scipen = 9999)
crime <- read.csv("data/03-C2/crime.csv")
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation", "m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality", "prob_prison", "time_prison", "crime_rate")
head(crime)
library(dplyr)
crime <- read.csv("data/03-C2/crime.csv") %>% select(-X)
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation", "m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality", "prob_prison", "time_prison", "crime_rate")
crime <- read.csv("data/03-C2/crime.csv") %>% select(-X)
names(crime) <- c("percent_m", "is_south", "mean_education", "police_exp60", "police_exp59", "labour_participation", "m_per1000f", "state_pop", "nonwhites_per1000", "unemploy_m24", "unemploy_m39", "gdp", "inequality", "prob_prison", "time_prison", "crime_rate")
head(crime)
crime <- crime %>%
mutate(is_south = as.factor(is_south))
set.seed(100)
idx <- initial_split(crime, prop = 0.8)
# libraries
library(tidyverse)
library(e1071)
library(tm)
library(katadasaR)
library(textclean)
library(rsample)
library(caret)
library(recipes)
set.seed(100)
idx <- initial_split(crime, prop = 0.8)
# check train dataset
train <- training(idx)
# check test dataset
test <- testing(idx)
